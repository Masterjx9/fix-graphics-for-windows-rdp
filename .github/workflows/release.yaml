# .github/workflows/release.yml  ← keep the filename you chose
name: Tauri Build & Release (Windows)

on:
  push:
    branches: [release]

permissions:
  contents: write         # required by actions/create-release + upload-asset

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install CLI + deps
        run: |
          npm i -g pnpm @tauri-apps/cli
          choco install nsis -y

      - name: Install project deps
        run: pnpm install

      - name: Tauri build (release)
        run: pnpm tauri build

      - name: Gather release files
        shell: pwsh
        run: |
          New-Item artefacts -ItemType Directory | Out-Null
          Copy-Item src-tauri/target/release/reset-graphics-for-rdp.exe      artefacts/
          Copy-Item src-tauri/target/release/bundle/msi/*.msi                artefacts/
          Copy-Item src-tauri/target/release/bundle/nsis/*setup.exe          artefacts/

      - uses: actions/upload-artifact@v4
        with:
          name: tauri-build
          path: artefacts/*

  create_release:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: tauri-build
          path: release-assets

      - id: relinfo
        run: |
          msg=$(git log -1 --pretty=%B)
          if [[ "$msg" =~ ^Release[[:space:]]+([0-9\.]+) ]]; then
            echo "TAG_NAME=${BASH_REMATCH[1]}"       >> $GITHUB_ENV
            echo "RELEASE_NAME=Release ${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
            ts=$(date +'%Y%m%d%H%M%S')
            echo "TAG_NAME=build-$ts"                >> $GITHUB_ENV
            echo "RELEASE_NAME=Build $ts"            >> $GITHUB_ENV
          fi

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:     ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      # -------- attach binaries (three separate calls) --------
      - name: Upload exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/reset-graphics-for-rdp.exe
          asset_name: reset-graphics-for-rdp.exe
          asset_content_type: application/octet-stream

      - name: Upload MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(ls release-assets/*.msi)
          asset_name: reset-graphics-for-rdp.msi
          asset_content_type: application/octet-stream

      - name: Upload NSIS installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(ls release-assets/*setup.exe)
          asset_name: reset-graphics-for-rdp-setup.exe
          asset_content_type: application/octet-stream
